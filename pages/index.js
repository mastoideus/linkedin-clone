import Head from "next/head";
import Image from "next/image";
import styles from "../styles/Home.module.css";
import { getSession, signOut, useSession } from "next-auth/react";
import Header from "../components/Header";
import Sidebar from "../components/Sidebar";
import Feed from "../components/Feed";
import Widgets from "../components/Widgets";
import Modal from "../components/Modal";
import { modalState, modalTypeState } from "../atoms/modalAtom";
import { useRouter } from "next/router";
import { useRecoilState } from "recoil";
import { connectToDatabase } from "../util/mongoConnect";
import { AnimatePresence } from "framer-motion";

export default function Home({ posts, articles }) {
  console.log(articles);
  const [modalOpen, setModalOpen] = useRecoilState(modalState);
  const [modalType, setModalType] = useRecoilState(modalTypeState);
  const router = useRouter();
  const { status } = useSession({
    required: true,
    onUnauthenticated() {
      router.push("/home");
    },
  });
  return (
    <div className="h-screen dark:bg-black bg-[#F3F2EF] dark:text-white overflow-y-scroll md:space-y-6">
      <Head>
        <title>LinkedIn</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Header />

      <main className="flex  justify-center gap-x-5 px-4 sm:px-12">
        <div className="flex flex-col md:flex-row gap-5">
          <Sidebar />
          <Feed posts={posts} />
        </div>
        <Widgets articles={articles} />
        <AnimatePresence>
          {modalOpen && (
            <Modal handleClose={() => setModalOpen(false)} type={modalType} />
          )}
        </AnimatePresence>
      </main>
    </div>
  );
}

export const getServerSideProps = async (context) => {
  const session = await getSession(context);
  if (!session) {
    return {
      redirect: {
        destination: "/home",
        permanent: false,
      },
    };
  }

  const { db } = await connectToDatabase();

  const posts = await db
    .collection("posts")
    .find()
    .sort({ timestamp: -1 })
    .toArray();

  const news = await fetch(
    `https://newsapi.org/v2/top-headlines?country=us&apiKey=${process.env.NEWS_API_KEY}`
  ).then((response) => response.json());

  return {
    props: {
      session: session,
      articles: news.articles,
      posts: posts.map((post) => {
        return {
          _id: post._id.toString(),
          input: post.input,
          username: post.username,
          email: post.email,
          createdAt: post.createdAt,
          userImg: post.userImg,
          photoUrl: post.photoUrl,
        };
      }),
    },
  };
};
